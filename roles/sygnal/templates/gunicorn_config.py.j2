# Customise these settings to your needs
bind = '{{ sygnal_listen_address }}'
daemon = False
accesslog = '{{ sygnal_gunicorn_access_log_file }}'
errorlog = '{{ sygnal_gunicorn_error_log_file }}'
loglevel = '{{ sygnal_log_level }}'
pidfile = '{{ sygnal_pid_file }}'
worker_connections = {{ sygnal_worker_connections }}
keepalive = {{ sygnal_keepalive }}
proc_name = '{{ sygnal_proc_name }}'

# It is inadvisable to change anything below here,
# since these settings make gunicorn work appropriately
# with sygnal.

preload_app = False
workers = 1
worker_class = 'gevent'


def worker_exit(server, worker):
    # Used in the hooks
    try:
        # This must be imported inside the hook or it won't find
        # the import
        import sygnal
        # NB. We obviously need to clean up in the worker, not
        # the arbiter process. worker_exit runs in the worker
        # (despite the docs claiming it runs after the worker
        # has exited)
        # We use a flask hook to handle the worker setup.
        # Unfortunately flask doesn't have a shutdown hook
        # (it's not a standard thing in WSGI).
        sygnal.shutdown()

    except:
        # We swallow this exception because it's generally a completely
        # useless, "No module named sygnal" due to it failing to load
        # the sygnal module because an exception was thrown.
        print("Failed to load sygnal - check your log file")

